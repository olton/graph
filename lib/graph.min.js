!function(){"use strict";!function(){const t=(t,i)=>{for(let s in i)t.style.hasOwnProperty(s)&&(t.style[s]=i[s])},i=(t,i,s)=>{const e=window.getComputedStyle(t).getPropertyValue(i.replace(/[A-Z]/g,(t=>`-${t.toLowerCase()}`)));switch(s){case"string":return e;case"float":return parseFloat(e);case"array":return e.split(" ");default:return parseInt(e)}},s=t=>t&&"object"==typeof t&&!Array.isArray(t),e=(t,...i)=>{if(!i.length)return t;const o=i.shift();if(s(t)&&s(o))for(const i in o)s(o[i])?(t[i]||Object.assign(t,{[i]:{}}),e(t[i],o[i])):Object.assign(t,{[i]:o[i]});return e(t,...i)},o=(t,i,s,e={})=>{const{color:o="#000",size:h=1,dash:a=[]}=e;t.beginPath(),t.save(),t.setLineDash(a),t.lineWidth=h,t.strokeStyle=o,t.moveTo(i.x,i.y),t.lineTo(s.x,s.y),t.stroke(),t.restore(),t.closePath()},h={color:"#e7e7e7",dash:[],size:1,count:50},a={v:{...h},h:{...h}};function n(t,i={}){const s=e({},a,i),{h:h,v:n}=s,r=t.canvas.width,l=t.canvas.height,c=this.padding,d=(r-(c.left+c.right))/n.count,p=(l-(c.top+c.bottom))/h.count;let f,g,u;f=c.left,g=c.top,u=0;do{o(t,{x:f,y:g},{x:r-c.right,y:g},h),g+=p,u++}while(u<=h.count);f=c.left,g=c.top,u=0;do{o(t,{x:f,y:g},{x:f,y:l-c.bottom},n),f+=d,u++}while(u<=n.count)}const r="text-top",l="text-bottom",c="top-left",d={type:"dot",size:1,color:"#000",fill:"#000",dash:[]},p={color:"#000",dash:[],size:1,type:"line"},f={style:"normal",weight:"normal",size:16,lineHeight:1,family:"sans-serif"},g={color:"#000",angle:0,align:"left",translate:[0,0],baseline:"middle"},u={...g,font:{...f},fixed:!1,template:"[x, y]",show:!0,shift:{x:0,y:0}},x={dot:{...d},line:{...p}},m={width:1,lineType:"solid",color:"#ffc351",radius:0},w={width:"auto",background:"#ffedbc",color:"#000",font:f,border:m,padding:{top:10,bottom:10,left:10,right:10},shadow:{shiftX:2,shiftY:2,blur:4,stretch:0,color:"rgba(0,0,0,.5)"},timeout:5e3},y={count:5,step:"auto",line:{...p},text:{...g},font:{...f,size:24},referencePoint:!0,skipFirst:!0,skipLast:!0,skip:0,showValue:!0,fixed:0,shift:{x:0,y:0}},b={...y,text:{...g,angle:-45,align:"right"}},v={...y},z={background:"#fff",border:{...m},font:{...f},position:"left",vertical:!1,rtl:!1,shift:{x:0,y:0}},k={text:"",position:c,font:{...f,size:24},style:{...g}},X="top-left",Y="top-right",T="bottom-right",$="bottom-left",L="top-center",S="bottom-center",C="center-center",P="left-center",W="right-center",M={factor:10,subFactor:2},H={origin:$,padding:0,x:{style:{...p,...M},show:!0},y:{style:{...p,...M},show:!0}};function D(t,i={}){const s=e({},H,i),{x:h,y:a,origin:n}=s,r=h.style,l=a.style,c=t.canvas.width,d=t.canvas.height,p=this.padding;let f,g,u,x,m={x:0,y:0};const w=(i,s)=>{o(t,{x:i,y:s},{x:i+r.factor,y:s-r.factor/r.subFactor},r),o(t,{x:i,y:s},{x:i+r.factor,y:s+r.factor/r.subFactor},r)},y=(i,s)=>{o(t,{x:i,y:s},{x:i-r.factor,y:s-r.factor/r.subFactor},r),o(t,{x:i,y:s},{x:i-r.factor,y:s+r.factor/r.subFactor},r)},b=(i,s)=>{o(t,{x:i,y:s},{x:i-l.factor/l.subFactor,y:s+l.factor},l),o(t,{x:i,y:s},{x:i+l.factor/l.subFactor,y:s+l.factor},l)},v=(i,s)=>{o(t,{x:i,y:s},{x:i-l.factor/l.subFactor,y:s-l.factor},l),o(t,{x:i,y:s},{x:i+l.factor/l.subFactor,y:s-l.factor},l)},z=()=>{f=p.left,u=c-p.right,g=p.top+(d-(p.top+p.bottom)-r.size)/2,x=g,o(t,{x:f,y:g},{x:u,y:x},r)},k=()=>{f=p.left+(c-(p.left+p.right)-l.size)/2,u=f,g=p.top,x=d-p.bottom,o(t,{x:f,y:g},{x:u,y:x},l)},M=()=>{f=p.left,u=c-p.right,g=d-p.bottom-r.size,x=g,o(t,{x:f,y:g},{x:u,y:x},r)},D=()=>{f=p.left,u=c-p.right,g=p.top+r.size,x=g,o(t,{x:f,y:g},{x:u,y:x},r)},N=()=>{f=p.left+l.size,g=p.top,x=d-p.bottom,o(t,{x:f,y:g},{x:f,y:x},l)},E=()=>{f=c-(p.right+l.size),g=p.top,x=d-p.bottom,o(t,{x:f,y:g},{x:f,y:x},l)};return n===C&&(r&&(h.show&&(z(),r.factor&&(w(f,g),y(u,g))),m.x=f+(u-f)/2),l&&(a.show&&(k(),l.factor&&(b(f,g),v(f,x))),m.y=g+(x-g)/2)),n===S&&(r&&(h.show&&(M(),r.factor&&(w(f,g),y(u,x))),m.x=f+(u-f)/2),l&&(a.show&&(k(),l.factor&&b(f,g)),m.y=x)),n===L&&(r&&(h.show&&(D(),r.factor&&(w(f,g),y(u,x))),m.x=f+(u-f)/2),l&&(a.show&&(k(),l.factor&&v(f,x)),m.y=g)),n===P&&(r&&(h.show&&(z(),r.factor&&y(u,g)),m.x=f),l&&(a.show&&(N(),l.factor&&(b(f,g),v(f,x))),m.y=g+(x-g)/2)),n===W&&(r&&(h.show&&(z(),r.factor&&w(f,g)),m.x=u),l&&(a.show&&(E(),l.factor&&(b(f,g),v(f,x))),m.y=g+(x-g)/2)),n===X&&(r&&(h.show&&(D(),r.factor&&y(u,g)),m.x=f),l&&(a.show&&(N(),l.factor&&v(f,x)),m.y=g)),n===$&&(r&&(h.show&&(M(),r.factor&&y(u,x)),m.x=f),l&&(a.show&&(N(),l.factor&&b(f,g)),m.y=x)),n===T&&(r&&(h.show&&(M(),r.factor&&w(f,g)),m.x=u),l&&(a.show&&(E(),l.factor&&b(f,g)),m.y=x)),n===Y&&(r&&(h.show&&(D(),r.factor&&w(f,g)),m.x=u),l&&(a.show&&(E(),l.factor&&v(u-2,x)),m.y=g)),m}const N=(t,i,s)=>{const{x:e,y:o}=s;return[t+e-1,i+o-2*i-1]},E=(t,[i,s,e=10,o=0,h=2*Math.PI],a={})=>{const{fill:n="#000",color:r="#000",size:l=1,dash:c=[]}=a;t.beginPath(),t.save(),t.setLineDash(c),t.lineWidth=l,t.strokeStyle=r,t.fillStyle=n,t.arc(i,s,e,o,h),t.stroke(),t.fill(),t.restore(),t.closePath()},R=(t,[i,s,e],o={})=>E(t,[i,s,e,0,2*Math.PI],{...o,fill:o.color}),F=(t,[i,s,e],o)=>E(t,[i,s,e,0,2*Math.PI],o),B=(t,[i,s,e],o={})=>{const{color:h="#000",fill:a="#fff",size:n=1,dash:r=[]}=o;t.beginPath(),t.save(),t.setLineDash(r),t.lineWidth=n,t.strokeStyle=h,t.fillStyle=a,t.rect(i-e,s-e,2*e,2*e),t.fill(),t.stroke(),t.restore(),t.closePath()},G=(t,[i,s,e],o={})=>{const{color:h="#000",fill:a="#fff",size:n=1,dash:r=[]}=o;t.beginPath(),t.save(),t.setLineDash(r),t.lineWidth=n,t.strokeStyle=h,t.fillStyle=a,t.moveTo(i,s-e),t.lineTo(i+e,s),t.lineTo(i,s+e),t.lineTo(i-e,s),t.lineTo(i,s-e),t.fill(),t.stroke(),t.restore(),t.closePath()},V=t=>t[0].toUpperCase()+t.substring(1),A={line:{size:1,dash:[5,5],color:"#000"},arc:{size:1,dash:[4,4],color:"#000",fill:"transparent",radius:20,type:"circle"}},j={drawDiamond:G,drawCircle:F,drawSquare:B};function O(t,i={}){const{line:s,arc:h}=e({},A,i),a=t.canvas.getBoundingClientRect(),n=t.canvas.width,r=t.canvas.height,l=this.dpi,c=this.proxy,d=this.padding;if(!c||!c.mouse)return;let{x:p,y:f}=c.mouse;p=(p-a.left)*l,f=(f-a.top)*l,f>d.top&&f<r-d.bottom&&p>d.left&&p<n-d.right&&(o(t,{x:d.left,y:f},{x:n-d.right,y:f},s),o(t,{x:p,y:d.top},{x:p,y:r-d.bottom},s),"none"!==h.type&&j[`draw${V(h.type)}`](t,[p,f,h.radius],h))}const q=(t,i=1)=>{let[s,e,o,h]=[0,0,0,0];return"number"!=typeof t&&isNaN(t)?"string"==typeof t?[s=0,e=0,o=0,h=0]=t.split(",").map((t=>t.trim())):"object"==typeof t&&(s=t.top?t.top:0,h=t.left?t.left:0,e=t.right?t.right:0,o=t.bottom?t.bottom:0):[s,e,o,h]=[+t,+t,+t,+t],{top:s*i,left:h*i,right:e*i,bottom:o*i}},I=(t,i,s={})=>{const{style:e="normal",weight:o="normal",size:h=12,lineHeight:a=1,family:n="sans-serif"}=s;t.save(),t.beginPath(),t.font=`${e} ${o} ${h}px/${a} ${n}`;const r=i.toString().split("\n");let l=0;for(let s of r){const s=t.measureText(i).width;s>l&&(l=s)}return t.closePath(),t.restore(),l},U=(t,i)=>{const s=i.split("\n"),e=t.measureText(i);return(e.fontBoundingBoxAscent+e.fontBoundingBoxDescent)*s.length},Z=(t,i,[s=0,e=0,o=0],h={},a={},n={})=>{const{align:r="left",baseLine:l="middle",color:c="#000",stroke:d="#000"}=h,{style:p="normal",weight:f="normal",size:g=12,lineHeight:u=1,family:x="sans-serif"}=a;let m=0;m=I(t,i,a),t.save(),t.beginPath(),t.textAlign=r,t.fillStyle=c,t.strokeStyle=d,t.font=`${p} ${f} ${g}px/${u} ${x}`,t.textBaseline=l,i.split("\n").map(((i,h)=>{t.fillText(i,s,e+h*u*a.size,o||m)})),t.closePath(),t.restore()},J={dpi:1,padding:0,grid:{...a},axis:{...H},cross:{...A},title:{...k},background:"#fff"};const K=(t,i=[],s={})=>{const{color:e="#000",size:o=1,dash:h=[]}=s;t.beginPath(),t.save(),t.setLineDash(h),t.lineWidth=o,t.strokeStyle=e,i.map((([i,s])=>{t.lineTo(i,s)})),t.stroke(),t.restore(),t.closePath()},Q=(t,i=[],s={},e=.25)=>{const{color:o="#000",size:h=1,dash:a=[]}=s;t.beginPath(),t.save(),t.setLineDash(a),t.lineWidth=h,t.strokeStyle=o,t.moveTo(i[0][0],i[0][1]);for(let s=0;s<i.length-1;s++){let e=(i[s][0]+i[s+1][0])/2,o=(i[s][1]+i[s+1][1])/2;t.quadraticCurveTo((e+i[s][0])/2,i[s][1],e,o),t.quadraticCurveTo((e+i[s+1][0])/2,i[s+1][1],i[s+1][0],i[s+1][1])}t.stroke(),t.restore(),t.closePath()},_=(t,[i,s,e],o={})=>{const{color:h="#000",fill:a="#fff",size:n=1}=o;t.beginPath(),t.save(),t.setLineDash([]),t.lineWidth=n,t.strokeStyle=h,t.fillStyle=a,t.moveTo(i,s-e),t.lineTo(i+e,s+e),t.lineTo(i-e,s+e),t.lineTo(i,s-e),t.fill(),t.stroke(),t.restore(),t.closePath()},tt={graphs:[],boundaries:{min:{x:0,y:0,d:0},max:{x:100,y:100,d:0},increment:0},lines:!0,dots:!0,origin:!0,maxGraphSize:0,dot:{...d},line:{...p},font:{...f},title:{align:"left",baseLine:"middle",color:"#000",stroke:"#000",font:{...f},angle:0,translate:[0,0]},labels:{x:{},y:{}},values:{...u},boundariesValues:{style:{...u},zeroPoint:!1,zero:!1,minX:!1,maxX:!1,minY:!1,maxY:!1}},it=()=>"#"+Math.floor(16777215*Math.random()).toString(16),st={drawCircle:F,drawSquare:B,drawTriangle:_,drawDiamond:G,drawDot:R},et={drawLine:K,drawCurve:Q};class ot{constructor(t,i){this.data=[...t],this.options=e({},tt,i),this.canvas=null,this.graphs=[],this.coords=[];const s=this;this.data.forEach(((t,i)=>{if(s.options.graphs[i]){const t=e({},d,s.options.dot,s.options.graphs[i].dot),o=e({},p,s.options.line,s.options.graphs[i].line);s.graphs.push(e({},tt,{dot:t,line:o}))}else s.graphs.push(e({},tt,{dot:s.options.dot,line:s.options.line}))})),this.calcMinMax()}get[Symbol.toStringTag](){return"PointChart"}setSuperChart(t){this.chart=t,this.padding=t.padding,this.fullWidth=t.viewWidth,this.fullHeight=t.viewHeight,this.width=t.viewWidth-(t.padding.left+t.padding.right),this.height=t.viewHeight-(t.padding.top+t.padding.bottom),this.origin=t.options.axis.origin,this.zero=t.zero,this.dpi=t.options.dpi,this.calcRatio()}calcMinMax(){let t=this.options.boundaries.min.x,i=this.options.boundaries.max.x,s=this.options.boundaries.min.y,e=this.options.boundaries.max.y;const o=this.options.boundaries.increment/100;this.minX=t+t*o,this.maxX=i+i*o,this.minY=s+s*o,this.maxY=e+e*o}calcRatio(){const t=["top-left","top-right","bottom-left","bottom-right"].includes(this.origin)?2:1;this.ratioX=this.width/(this.maxX-this.minX)*t,this.ratioY=this.height/(this.maxY-this.minY)*t}add(t,[i,s]){const e=this.options.maxGraphSize;if(e)for(;this.data[t].length>e-1;)this.data[t].shift();this.data[t].push([i,s]),this.chart.resize()}#t(t,i){const{left:s,top:e}=this.padding,o=s-1,h=s+this.width+1,a=e-1,n=e+this.height+1;return t>=o&&t<=h&&i>=a&&i<=n}drawBoundaries(){const{zero:t,minX:i,maxX:s,minY:e,maxY:o,style:h,zeroPoint:a}=this.options.boundariesValues;if(t){const t=`${(this.minX+this.maxX)/2}, ${(this.minY+this.maxY)/2}`;((t,i,s,e,o)=>{let h,a,n,r;const{x:l,y:c}=i;switch(h=l,a=c,console.log(o),s){case C:n=h+10,r=a-16,h-=1,a-=1;break;case X:n=h+10,r=a+16,h+=2,a+=2;break;case L:n=h+10,r=a+16,a+=2;break;case Y:n=h-36,r=a+16,h-=2,a+=2;break;case $:n=h+10,r=a-16,h+=2,a-=2;break;case S:n=h+10,r=a-16,h-=1,a-=2;break;case T:n=h-36,r=a-16,h-=2,a-=2;break;case W:n=h-36,r=a-16,h-=2,a-=1;break;case P:n=h+10,r=a-16,h+=2,a-=1}o.zeroPoint&&F(t,[h,a,4],{}),Z(t,e,[n,r,0],o)})(this.chart.ctx,this.zero,this.origin,t,{...h,zeroPoint:a})}if(i){const t=`${this.minX}`;((t,i,s,e,o,h)=>{let a,n,r,l;const{x:c,y:d}=s;switch(a=c,n=d,e){case C:r=a+i,l=n-16,Z(t,o,[r,l,0],h);break;case L:case Y:r=a+i,l=n+16,Z(t,o,[r,l,0],h);break;case S:case T:r=a+i,l=n-16,Z(t,o,[r,l,0],h);break;case W:r=a+2*i,l=n-16,Z(t,o,[r,l,0],h)}})(this.chart.ctx,this.minX*this.ratioX,this.zero,this.origin,t,h)}if(s){const t=`${this.maxX}`;((t,i,s,e,o,h)=>{let a,n,r,l,c;const{x:d,y:p}=s;switch(a=d,n=p,c=t.measureText(o).width,e){case C:console.log(t.measureText(o).width),r=a+i-10-c,l=n-16,Z(t,o,[r,l,0],h);break;case X:case L:r=a+i-10-c,l=n+16,Z(t,o,[r,l,0],h);break;case Y:r=a+i,l=n+16,Z(t,o,[r,l,0],h);break;case $:case S:r=a+i-10-c,l=n-16,Z(t,o,[r,l,0],h);break;case T:r=a+i,l=n-16,Z(t,o,[r,l,0],h);break;case W:r=a+2*i,l=n-16,Z(t,o,[r,l,0],h);break;case P:r=a+2*i-10-c,l=n-16,Z(t,o,[r,l,0],h)}})(this.chart.ctx,this.maxX*this.ratioX,this.zero,this.origin,t,h)}if(e){const t=`${this.minY}`;((t,i,s,e,o,h)=>{let a,n,r,l;const{x:c,y:d}=s;switch(a=c,n=d,e){case C:case X:r=a+10,l=n-i-5,Z(t,o,[r,l,0],h);break;case L:r=a+10,l=n-2*i-5,Z(t,o,[r,l,0],h);break;case Y:case W:r=a-46,l=n-i-5,Z(t,o,[r,l,0],h);break;case P:r=a+10,l=n-i-5,Z(t,o,[r,l,0],h)}})(this.chart.ctx,this.minY*this.ratioY,this.zero,this.origin,t,h)}if(o){const t=`${this.maxY}`;((t,i,s,e,o,h)=>{let a,n,r,l;const{x:c,y:d}=s;switch(a=c,n=d,e){case C:case $:r=a+10,l=n-i+10,Z(t,o,[r,l,0],h);break;case S:r=a+10,l=n-2*i+10,Z(t,o,[r,l,0],h);break;case T:r=a-40,l=n-i+10,Z(t,o,[r,l,0],h);break;case P:r=a+10,l=n-i+10,Z(t,o,[r,l,0],h);break;case W:r=a-46,l=n-i+10,Z(t,o,[r,l,0],h)}})(this.chart.ctx,this.maxY*this.ratioY,this.zero,this.origin,t,h)}}drawGraph(){if(!this.data||!this.data.length)return;const t=[],i=[];let s=0;const e=this.chart.ctx,o=this.chart.dpi,h=this.options;for(let a of this.data){const n=this.graphs[s],r=n.dot;r.color;const l=n.line;for(let s=0;s<a.length;s++){let e,o,[h,n]=a[s];e=Math.round((this.origin?h:h-this.minX)*this.ratioX),o=Math.round((this.origin?n:n-this.minY)*this.ratioY),this.origin&&([e,o]=N(e,o,this.chart.zero)),t.push([e,o,h,n]),this.#t(e,o)&&i.push([e,o,h,n])}if(h.lines&&et[`draw${V(l.type)}`](e,i,l),h.dots)for(let[t,s,a,n]of i)if("random"===r.color&&(r.color=it()),st[`draw${V(r.type)}`](e,[t,s,r.size],r),h.values&&h.values.show){const i=h.values.template.replace("x",a).replace("y",n);Z(e,`${i}`,[t+h.values.translate[0]*o,s+h.values.translate[1]*o,0],h.values,h.values.font)}this.coords[s]=t,s++}}draw(){this.drawBoundaries(),this.drawGraph()}}const ht=(t,i=[],s={})=>{const{color:e="#000",fill:o="#000",size:h=1,dash:a=[]}=s;t.beginPath(),t.save(),t.setLineDash(a),t.lineWidth=h,t.strokeStyle=e,t.fillStyle=o,i.map((([i,s])=>{t.lineTo(i,s)})),t.lineTo(i[0][0],i[0][1]),t.fill(),t.restore(),t.closePath()},at={graphs:[],boundaries:{min:{x:null,y:null},max:{x:null,y:null},increment:null},lines:!0,dots:!0,origin:!0,maxGraphSize:0,dot:{...d},line:{...p,fill:"transparent"},font:{...f},labels:{x:{...b},y:{...v}},values:{...u},tooltip:{...w},legend:{...z},onTooltipShow:(t,i)=>`(${t}, ${i})`,onDrawValue:(t,i)=>`(${t}, ${i})`,onDrawLabelX:t=>`${t}`,onDrawLabelY:t=>`${t}`,onDrawLegend:t=>`${t}`},nt=(t=[],i="x")=>{let s,e,o,h;if("number"==typeof i)h=i;else switch(i.toString().toLowerCase()){case"y":h=1;break;case"z":h=2;break;default:h=0}for(const i of t)o=i[h],(isNaN(s)||s>o)&&(s=o),(isNaN(e)||e<o)&&(e=o);return[s,e]},rt=t=>null!=t&&!isNaN(+t),lt={drawLabelY(){const t=this.options,i=t.labels.y;let s=0;if("auto"===i.step?i.count&&(s=(this.maxY-this.minY)/i.count):s=(this.maxY-this.minY)/i.step,!s)return;const e=(t,s)=>{i.line&&i.referencePoint&&R(this.ctx,[t,s,4],i.line)},h=(t,s,e)=>{if(i.showValue){const o=I(this.ctx,t,i.font);U(this.ctx,t,i.font);const h=s-o-i.font.size/2+i.shift.x,a=e+i.shift.y;if(this.ctx.save(),i.text.angle){const t=s+o/2-Math.abs(i.text.angle/2)+i.shift.x,h=e-i.font.size/2+o+i.shift.y;this.ctx.translate(t,h),this.ctx.rotate(i.text.angle*Math.PI/180),this.ctx.translate(-t,-h)}Z(this.ctx,`${t}`,[h,a,0],i.text,i.font),this.ctx.restore()}},a=(t,s,e)=>{if(i.line)if(t===this.minY&&i.skipFirst);else{const t={x:s,y:e},h={x:s+this.width,y:e};o(this.ctx,t,h,i.line)}};if("auto"===i.step){let o=this.minY,n=this.padding.left,r=this.padding.top+this.height;this.padding.left,this.width;for(let l=0;l<=i.count;l++)a(l,n,r),e(n,r),h(t.onDrawLabelY(o),n,r),o+=s,r=this.padding.top+this.height-(o-this.minY)*this.ratioY}else{let i=this.padding.left,o=this.padding.top+this.height,n=this.minY;for(;n<this.maxY+1;)a(n,i,o),e(i,o),h(t.onDrawLabelY(n),i,o),n+=s,o-=s*this.ratioY}}},ct={drawLabelX(){const t=this.options,i=t.labels.x;let s=0;if("auto"===i.step?i.count&&(s=(this.maxX-this.minX)/i.count):s=(this.maxX-this.minX)/i.step,!s)return;const e=(t,s)=>{i.line&&i.referencePoint&&R(this.ctx,[t,s,4],i.line)},h=(t,s,e)=>{if(i.showValue){const o=I(this.ctx,""+t,i.font),h=U(this.ctx,""+t,i.font),a=s-o/2+i.shift.x,n=e+h+i.font.size/2+i.shift.y;if(this.ctx.save(),i.text.angle){const t=s+o/2-Math.abs(i.text.angle/2)+i.shift.x,h=e-i.font.size/2+o+i.shift.y;this.ctx.translate(t,h),this.ctx.rotate(i.text.angle*Math.PI/180),this.ctx.translate(100-t,-h)}Z(this.ctx,`${t}`,[a,n,0],i.text,i.font),this.ctx.restore()}},a=(t,s,e)=>{if(i.line)if(t===this.minX&&i.skipFirst);else{const t={x:s,y:e},h={x:s,y:e+this.height};o(this.ctx,t,h,i.line)}};if("auto"===i.step){let o=this.minX,n=this.padding.left,r=this.padding.top+this.height,l=this.padding.top;for(let c=0;c<=i.count;c++)a(c,n,l),e(n,r),h(t.onDrawLabelX(o),n,r),o+=s,n=this.padding.left+(o-this.minX)*this.ratioX,console.log(n,this.width+this.padding.left)}else{let i=this.padding.left,o=this.padding.top+this.height,n=this.padding.top,r=this.minX;for(;r<this.maxX+1;)a(r,i,n),e(i,o),h(t.onDrawLabelX(r),i,o),r+=s,i+=s*this.ratioX}}},dt={showTooltip(t,[i,s],[e,o]){const h=this.options;if(this.removeTooltip(),!this.data||!this.data.length)return;let{font:a,shadow:n,border:r,padding:l,timeout:c}=h.tooltip;l=q(l);const d=document.createElement("div");d.style.position="fixed",d.style.border=`${r.width}px ${r.lineType} ${r.color}`,d.style.borderRadius=`${r.radius}`,d.style.padding=`${l.top}px ${l.right}px ${l.bottom}px ${l.left}px`,d.style.background=`${h.tooltip.background}`,d.style.font=`${a.style} ${a.weight} ${a.size}px/${a.lineHeight} ${a.family}`,d.style.boxShadow=`${n.shiftX}px ${n.shiftY}px ${n.blur}px ${n.color}`,d.innerHTML=h.onTooltipShow.apply(this,[e,o]),document.querySelector("body").appendChild(d),d.style.top=s-d.clientHeight-15+"px",d.style.left=i-d.clientWidth/2-5+"px",this.tooltip=d,setTimeout((()=>{this.removeTooltip()}),c)},removeTooltip(){this.tooltip&&(this.tooltip.remove(),this.tooltip=null)}},pt={drawCircle:F,drawSquare:B,drawTriangle:_,drawDiamond:G,drawDot:R},ft={drawLine:K,drawCurve:Q};class gt{constructor(t,i){this.data=[...t],this.options=e({},at,i),this.canvas=null,this.graphs=[],this.graphsNames=[],this.hiddenGraphs=[],this.coords=[],this.tooltip=null,this.minX=null,this.maxX=null,this.minY=null,this.maxY=null,this.title=this.options.title;const s=this,o=this.options,h=[];let a,n;this.data.forEach(((t,i)=>{if(o.graphs[i]){const t=e({},d,o.dot,o.graphs[i].dot),h=e({},p,o.line,o.graphs[i].line);s.graphs.push(e({},x,{dot:t,line:h})),n=o.graphs[i].name||`line${i+1}`}else if(n=`line${i+1}`,0===i)s.graphs.push(e({},x,{dot:o.dot,line:o.line}));else{do{a=it()}while(h.includes(a));s.graphs.push(e({},x,{dot:{...o.dot,color:a},line:{...o.line,color:a}})),h.push(a)}s.graphsNames.push(n)})),console.log(this.graphs),this.calcMinMax()}get[Symbol.toStringTag](){return"LineChart"}setSuperChart(t){switch(this.chart=t,this.dpi=t.options.dpi,this.ctx=t.ctx,this.canvas=t.canvas,this.padding=t.padding,this.fullWidth=t.viewWidth,this.fullHeight=t.viewHeight,this.width=t.viewWidth-(t.padding.left+t.padding.right),this.height=t.viewHeight-(t.padding.top+t.padding.bottom),this.origin=t.options.axis.origin,this.zero=t.zero,this.proxy=t.proxy,this.origin){case X:this.zero=[this.padding.left,this.padding.top];break;case Y:this.zero=[this.width+this.padding.left,this.padding.top];break;case T:this.zero=[this.width+this.padding.left,this.height+this.padding.top];break;default:this.zero=[this.padding.left,this.height+this.padding.top]}this.calcRatio()}calcMinMax(){const t=this.options;let i=[];for(let t of this.data)if(Array.isArray(t))for(const[s,e]of t)i.push([s,e]);const[s,e]=nt(i,"x"),[o,h]=nt(i,"y");this.minX=rt(t.boundaries.min.x)?t.boundaries.min.x:s,this.maxX=rt(t.boundaries.max.x)?t.boundaries.max.x:e,this.minY=rt(t.boundaries.min.y)?t.boundaries.min.y:o,this.maxY=rt(t.boundaries.max.y)?t.boundaries.max.y:h,isNaN(this.minX)&&(this.minX=0),isNaN(this.maxX)&&(this.maxX=100),isNaN(this.minY)&&(this.minX=0),isNaN(this.maxY)&&(this.maxX=100)}calcRatio(){this.ratioX=this.width/(this.maxX-this.minX),this.ratioY=this.height/(this.maxY-this.minY)}#t(t,i){const{left:s,top:e}=this.padding,o=s-1,h=s+this.width+1,a=e-1,n=e+this.height+1;return t>=o&&t<=h&&i>=a&&i<=n}add(t,[i,s],e=!0){const o=this.options.maxGraphSize;if(o)for(;this.data[t].length>o-1;)this.data[t].shift();this.data[t].push([i,s]),this.minX=this.data[t][0][0],this.maxX=i,this.maxY<s&&(this.maxY=s+s*(this.options.boundaries.increment/100)),this.calcRatio(),this.chart.resize()}hide(t){if(this.hiddenGraphs.includes(t)){let i=this.hiddenGraphs.indexOf(t);-1!==i&&this.hiddenGraphs.splice(i,1)}else this.hiddenGraphs.push(t)}#i(t,i){const[s,e]=this.zero;let o,h;return this.origin===Y?(o=s-Math.round((t-this.minX)*this.ratioX),h=e+Math.round((i-this.minY)*this.ratioY)):this.origin===X?(o=Math.round((t-this.minX)*this.ratioX)+s,h=Math.round((i-this.minY)*this.ratioY)+e):this.origin===T?(o=s-Math.round((t-this.minX)*this.ratioX),h=e-Math.round((i-this.minY)*this.ratioY)):this.origin===$&&(o=Math.round((t-this.minX)*this.ratioX)+s,h=e-Math.round((i-this.minY)*this.ratioY)),[o,h]}drawGraph(){if(!this.data||!this.data.length)return;const t=[],i=this.ctx,s=this.options,[e,o]=this.zero;let h=0;for(let a of this.data){if(this.hiddenGraphs.includes(h))continue;const n=this.graphs[h],r=n.dot,l=n.line;if(a.length){for(let i=0;i<a.length;i++){let[s,e]=a[i],[o,h]=this.#i(s,e);this.#t(o,h)&&t.push([o,h,s,e])}if(t.length){if(n.line.fill&&"transparent"!==n.line.fill){let s=[],h=t[t.length-1][0];s.push([e,o,0,0]),s=s.concat(t),s.push([h,o,0,0]),ht(i,s,l)}if(s.lines&&ft[`draw${V(l.type)}`](i,t,l),s.dots)for(let[e,o,h,a]of t)if("random"===r.color&&(r.color=it()),"random"===r.fill&&(r.fill=it()),pt[`draw${V(r.type)}`](i,[e,o,r.size],r),s.values&&s.values.show){let t,n,r;t=s.onDrawValue?s.onDrawValue.apply(this,[h,a]):s.values.template.replace("x",h).replace("y",a),n=I(this.ctx,t,s.values.font),r=t.split("\n").length*s.values.font.size,Z(i,`${t}`,[e-n/2+s.values.shift.x,o-r+s.values.shift.y,0],s.values,s.values.font)}}this.coords[h]=t,h++}}}drawTooltip(){this.options;const t=this.ctx,i=this.canvas.getBoundingClientRect();let s=!1;if(!this.data||!this.data.length)return;if(!this.proxy.mouse)return;let{x:e,y:o}=this.proxy.mouse,[h,a]=[e,o];e=(e-i.left)*this.dpi,o=(o-i.top)*this.dpi;let n=0;for(let i of this.coords){for(const[r,l,c,d]of i){const i=r-10,p=r+10,f=l-10,g=l+10;e>i&&e<p&&o>f&&o<g&&F(t,[r,l,10],this.graphs[n].dot),e>i&&e<p&&o>f&&o<g&&(this.showTooltip(t,[h,a],[c,d],this.graphs[n].dot),s=!0)}n++}!s&&this.tooltip&&this.removeTooltip()}drawLegend(){if(0===this.data.length)return;const t=this.options,i={};for(let t=0;t<this.graphs.length;t++){const s=this.graphs[t],{dot:e}=s,{color:o,fill:h}=e;i[this.graphsNames[t]]={color:o,fill:h}}if(!1===t.legend.vertical){let s=0,e=0;for(let t in i)s+=I(this.ctx,t)+10;switch(t.legend.position){case"left":e=this.padding.left;break;case"right":e=this.fullWidth-2*s-this.padding.right;break;case"center":e=(this.fullWidth-s)/2}let o=0;for(let s in i){const h=this.fullHeight-30,a=e+o,n=I(this.ctx,s,t.legend.font),r=t.onDrawLegend(s);B(this.ctx,[a,h,10],i[s]),Z(this.ctx,r,[a+20,h,n],{...i[s],color:"#000"},t.legend.font),o+=10}}}drawLabelX(){}drawLabelY(){}showTooltip(){}removeTooltip(){}draw(){this.drawLabelX(),this.drawLabelY(),this.drawGraph(),this.drawLegend(),this.drawTooltip()}}Object.assign(gt.prototype,ct,lt,dt);const ut={...g,font:{...f},position:"default"};class xt{constructor(t,[i,s],o){this.text=t,this.lines=t.split("\n"),this.options=e({},ut,o),this.canvas=null,this.w=0,this.x=i,this.y=s}get[Symbol.toStringTag](){return"TextChart"}setSuperChart(t){this.chart=t,this.ctx=t.ctx,this.padding=t.padding,this.fullWidth=t.viewWidth,this.fullHeight=t.viewHeight,this.width=t.viewWidth-(t.padding.left+t.padding.right),this.height=t.viewHeight-(t.padding.top+t.padding.bottom),this.dpi=t.options.dpi,this.w=I(this.ctx,this.text),this.h=this.lines.length*this.options.font.size*this.options.font.lineHeight}draw(){let t,i;switch(this.options.position){case"free":t=this.x,i=this.y;break;case c:t=0,i=this.options.font.size;break;case"top-center":t=this.fullWidth/2,i=this.options.font.size,this.options.align="center";break;case"top-right":t=this.fullWidth,i=this.options.font.size,this.options.align="right";break;case"bottom-left":t=0,i=this.fullHeight-this.h;break;case"bottom-center":t=this.fullWidth/2,i=this.fullHeight-this.h,this.options.align="center";break;case"bottom-right":t=this.fullWidth,i=this.fullHeight-this.h,this.options.align="right";break;default:[t,i]=[this.x,this.y]}Z(this.ctx,this.text,[t,i,this.w],this.options,this.options.font)}}globalThis.graph={Chart:class{constructor(s,o={}){const h=this;if(this.options=e({},J,o),this.element=s,this.container=null,this.canvas=null,this.ctx=null,this.charts=[],this.raf=null,this.axis=this.options.axis,this.grid=this.options.grid,this.cross=this.options.cross,this.padding=q(this.options.padding,this.options.dpi),this.zero=null,this.title=this.options.title,this.hiddenCharts=[],this.proxy=new Proxy({},{set(...t){const i=Reflect.set(...t);return h.raf=requestAnimationFrame(h.draw.bind(h)),i}}),"string"==typeof s?this.container=document.querySelector(s):s instanceof HTMLElement&&(this.container=s),!this.container)throw new Error("You must define an element for a chart!");for(let i in this.options){const s=this.options[i];"width"===i||"height"===i?this.container.style[i]=s:"className"===i?this.container.className+=s:"css"===i?"object"==typeof s?t(this.container,s):"string"==typeof s&&(this.container.style.cssText+=s):this.container.hasOwnProperty(i)&&this.container.setAttribute(i,o[i])}const a=this.container.getBoundingClientRect(),n=this.container,r=i(n,"paddingLeft"),l=i(n,"paddingRight"),c=i(n,"paddingTop"),d=i(n,"paddingBottom"),p=i(n,"borderLeftWidth"),f=i(n,"borderRightWidth"),g=i(n,"borderTopWidth"),u=i(n,"borderBottomWidth");this.width=a.width,this.height=a.height,this.dpi=this.options.dpi,this.viewHeight=this.dpi*this.height,this.viewWidth=this.dpi*this.width,this.center=[this.viewWidth/2,this.viewHeight/2],this.radius=Math.min(this.viewHeight,this.viewWidth)/2,this.containerPadding={top:c+g,right:l+f,bottom:d+u,left:r+p},this.createCanvas(),this.setCanvasSize(),this.addEvents(),this.draw()}createCanvas(){this.canvas=document.createElement("canvas"),this.container.innerHTML="",this.container.appendChild(this.canvas),this.ctx=this.canvas.getContext("2d"),this.ctx.dpi=this.dpi}setCanvasSize(){this.canvas.style.height=this.height-this.containerPadding.top-this.containerPadding.bottom+"px",this.canvas.style.width=this.width-this.containerPadding.left-this.containerPadding.right+"px",this.canvas.width=this.viewWidth,this.canvas.height=this.viewHeight}clearCanvas(){this.ctx.clearRect(0,0,this.viewWidth,this.viewHeight)}setBackground(){this.ctx.fillStyle=this.options.background,this.ctx.fillRect(0,0,this.viewWidth,this.viewHeight)}drawTitle(){const{text:t,position:i,font:s,style:e}=this.options.title;let o=0,h=0,a=0;if(t){for(let i of t.toString().split("\n"))I(this.ctx,i,s);if(a=this.viewWidth-this.padding.left-this.padding.right,"left"===e.align)switch(i){case r:o=s.size,h=s.size;break;case l:o=0,h=this.viewHeight-this.padding.bottom+s.size}else if("right"===e.align)switch(i){case r:o=this.viewWidth-s.size,h=s.size;break;case l:o=this.viewWidth-s.size,h=this.viewHeight-this.padding.bottom+s.size}else if("center"===e.align)switch(i){case r:o=this.viewWidth/2,h=s.size;break;case l:o=this.viewWidth/2,h=this.viewHeight-this.padding.bottom+s.size}Z(this.ctx,t,[o,h,a],e,s)}}setTitle(t,i){i&&(this.title=e(this.title,i)),this.title.text=t,this.resize()}draw(){const t=this.hiddenCharts,i=this.options;this.clearCanvas(),this.setBackground(),i.grid&&n.call(this,this.ctx,"object"==typeof i.grid?i.grid:void 0),i.axis&&(this.zero=D.call(this,this.ctx,"object"==typeof i.axis?i.axis:void 0)),i.cross&&O.call(this,this.ctx,"object"==typeof i.cross?i.cross:void 0),this.charts.forEach(((i,s)=>{t.includes(s)||i.draw()})),this.drawTitle()}resize(){this.draw()}addChart(){const t=[...arguments];for(let i of t)this.charts.includes(i)||(i.setSuperChart(this),this.charts.push(i),i.draw())}hideChart(t){if(this.hiddenCharts.includes(t)){let i=this.hiddenCharts.indexOf(t);-1!==i&&this.hiddenCharts.splice(i,1)}else this.hiddenCharts.push(t)}mouseMove(t){const i=this.options.onHover,{clientX:s,clientY:e}=t.changedTouches?t.touches[0]:t;"function"==typeof i&&i.apply(null,[s,e]),this.proxy.mouse={x:s,y:e},t.cancelable&&t.preventDefault()}mouseLeave(){const t=this.options.onLeave;"function"==typeof t&&t.apply(null,[]),this.proxy.mouse=null}addEvents(){const t=this.canvas;t.addEventListener("mousemove",this.mouseMove.bind(this)),t.addEventListener("touchmove",this.mouseMove.bind(this),{passive:!1}),t.addEventListener("mouseleave",this.mouseLeave.bind(this)),window.addEventListener("resize",this.resize.bind(this))}destroy(){const t=this.canvas;cancelAnimationFrame(this.raf),t.removeEventListener("mousemove",this.mouseMove.bind(this)),t.removeEventListener("mouseleave",this.mouseLeave.bind(this)),window.removeEventListener("resize",this.resize.bind(this))}saveAs(t,i="image/png"){const s=i.split("/")[1],e=this.canvas.toDataURL(i),o=document.createElement("a");o.download=t||`image.${s}`,o.href=e,o.dataset.downloadurl=[i,o.download,o.href].join(":"),document.body.appendChild(o),o.click(),document.body.removeChild(o)}toImageSource(t="image/png",i=.92){return this.ctx.toDataURL(t,i)}},PointChart:ot,LineChart:gt,TextChart:xt}}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
